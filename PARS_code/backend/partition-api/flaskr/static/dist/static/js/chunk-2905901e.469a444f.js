(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2905901e"],{"19ff":function(e,t,s){},5919:function(e,t,s){"use strict";s.r(t);var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",[s("el-row",{attrs:{type:"flex"}},[s("el-col",{staticClass:"selectedCard",attrs:{span:22,offset:2}},[s("span",[e._v("分区算法：")]),e._l(e.accessedMethods,(function(t,n){return s("el-tag",{key:"method"+n},[e._v(e._s(t.label)),s("i",{staticClass:"el-icon-check"})])})),s("br"),s("div",{staticStyle:{"margin-top":"30px"}},[s("span",[e._v("成本模型：")]),e._l(e.accessedCostModels,(function(t,n){return s("el-tag",{key:"method"+n},[e._v(e._s(t.label)),s("i",{staticClass:"el-icon-check"})])}))],2)],2)],1),s("el-row",{staticStyle:{"margin-top":"40px"},attrs:{type:"flex",justify:"center"}},[s("el-col",{attrs:{span:10,offset:2}},[s("el-row",{staticClass:"select-panel",attrs:{type:"flex",justify:"center"}},[s("el-transfer",{attrs:{data:e.methods},on:{change:e.onMethodsChanged},model:{value:e.selectedMethods,callback:function(t){e.selectedMethods=t},expression:"selectedMethods"}})],1),s("el-row",{staticClass:"select-panel",attrs:{type:"flex",justify:"center"}},[s("el-col",{attrs:{span:8}},e._l(e.costModels,(function(t){return s("el-radio",{key:t.key,staticStyle:{"font-size":"50px"},attrs:{size:"medium",border:!0,label:t.key},on:{change:e.onCostModelsChanged},model:{value:e.selectedCostModels,callback:function(t){e.selectedCostModels=t},expression:"selectedCostModels"}},[e._v(e._s(t.label))])})),1)],1)],1),s("el-col",{attrs:{span:14,offset:0}},[s("h2",[s("span",[e._v("算法介绍")]),s("el-divider",{attrs:{direction:"vertical"}}),s("span",[e._v("成本模型介绍")])],1),s("el-row",{staticClass:"introduce-panel",attrs:{type:"flex"}},[s("el-col",{attrs:{span:16}},[s("Collapse",{attrs:{simple:"","v-model":"0"}},e._l(e.accessedMethods,(function(t,n){return s("Panel",{key:"a"+n,attrs:{name:n+""}},[e._v(" "+e._s(t.label)+" "),s("p",{attrs:{slot:"content"},slot:"content"},[e._v(e._s(t.content))])])})),1)],1),s("el-col",{attrs:{span:8,offset:2}},[s("Collapse",{attrs:{simple:"","v-model":"0"}},e._l(e.accessedCostModels,(function(t,n){return s("Panel",{key:"c"+n,attrs:{name:n+""}},[e._v(" "+e._s(t.label)+" "),s("p",{attrs:{slot:"content"},slot:"content"},[e._v(e._s(t.content))])])})),1)],1)],1)],1)],1)],1)},o=[],a=s("b85c"),l=(s("99af"),s("d81d"),{data:function(){return{methods:[{key:0,label:"AUTOPART",content:"AutoPart生成一组主分区（称为原子片段）。垂直分区是原子的，如果所有访问它的查询都引用分区中的所有属性。换句话说，不存在访问原子片段子集的查询。此后，在每次迭代中，通过将片段与原子片段或上一次迭代的片段相结合来扩展片段。重复此过程，直到查询工作负载的估计成本没有改善为止。"},{key:1,label:"HILLCLIMB",content:"自底向上的算法，从列布局开始(每个属性位于不同的垂直分区)，此后，在每次迭代中，算法都会找到并合并两个分区，当合并后，这两个分区在预期的查询开销方面会有最好的改善。这意味着在每个迭代中，垂直分区的数量减少了一个。当预期的查询开销没有改善时，算法停止迭代。"},{key:2,label:"NAVATHE",content:"自顶向下的算法,给定一组属性和一组引用这些属性的查询，该算法构造一个属性亲和矩阵。属性亲和矩阵的单元格（i，j）表示属性i与属性j（也称为它们的亲和性）共出现的次数。然后，该算法对矩阵的单元进行聚类，使得具有较高亲和力的属性紧密地联系在一起。作者建议使用键能算法[14]进行矩阵聚类。然后，该算法将聚集的属性集递归地拆分为垂直分区。"},{key:3,label:"O2P",content:"自顶向下的算法，适合在线分区,从Navathe的算法开始，将其转化为一个在线的垂直分割算法,为了计算垂直分区，O2P采用贪婪的方法在每个步骤中创建一个（最好的）新的垂直分区。它还使用动态规划来记住上一步中非最佳垂直分区的成本,提高分析速度."},{key:4,label:"TROJAN",content:"适用于数据复制，如HDFS中的数据复制。为了考虑HDFS中的默认数据复制，它首先对查询进行分组，并将每个查询组映射到不同的数据副本。它也使用相同的列分组算法进行查询分组。然后，对于每个查询组，它独立地计算列组。"},{key:5,label:"OPTIMAL",content:"BellNumber，遍历所有的组合情况。"},{key:6,label:"ROW",content:"原表不分区."},{key:7,label:"COLUMN",content:"表中每个属性作为一个单独的分区"},{key:8,label:"Rodriguez",content:"一种CBPA算法，将频繁项集的支持度概念引入到亲和度矩阵，将矩阵中的所有亲和度值作为数据集，保留前30%频繁出现的亲和度作为大于亲和度支持度的支持边，依次遍历每个属性，如果该属性未分配，则将包含该属性的所有支持边作为一个分区。"},{key:9,label:"HYF",content:"使用Apriori算法，在项集组合候选分区的思路和Gorla一致，只是在生成频繁项集时，使用模式的余弦相似度代替频数作为频繁项的权重。"},{key:10,label:"SCVP",content:"我们自己的算法，一种以谱聚类为主的混合模型策略解决垂直分区问题。"}],selectedMethods:[],costModels:[{key:0,label:"Huang",content:"对执行负载，读取所需数据将要访问的磁盘块进行估计。"},{key:1,label:"Son",content:"分布式环境下，垂直分区的目标是提高各结点上查询负载的执行性能和系统的整体的吞吐量，与两个指标DF和IA有关，#DF指所有查询访问不同分区的总频数，与查询执行性能有联系，而#IA表示数据查询之间被干扰访问的总频率，与系统的吞吐量有关，评判一个垂直分区的目标是c⋅avg⁡(#DF)+avg⁡(#IA)的值最小。(c为权重比例系数)"}],selectedCostModels:[],accessedMethods:[],activeMethodNames:[0],accessedCostModels:[],activeCostModelNames:[0]}},methods:{onMethodsChanged:function(e,t,s){var n=this;this.accessedMethods=[],e.sort(),e.map((function(e){n.accessedMethods.push(n.methods[e])})),this.$store.commit("SET_METHODS",this.accessedMethods)},onCostModelsChanged:function(e){this.accessedCostModels=[],this.accessedCostModels.push(this.costModels[e]);var t,s=[],n=Object(a["a"])(this.accessedCostModels);try{for(n.s();!(t=n.n()).done;){var o=t.value;s.push(o["label"])}}catch(l){n.e(l)}finally{n.f()}this.$store.commit("SET_COSTMODELS",s)}}}),c=l,r=(s("82fa"),s("2877")),i=Object(r["a"])(c,n,o,!1,null,"a60025a8",null);t["default"]=i.exports},"82fa":function(e,t,s){"use strict";s("19ff")},b85c:function(e,t,s){"use strict";s.d(t,"a",(function(){return a}));s("a4d3"),s("e01a"),s("d3b7"),s("d28b"),s("3ca3"),s("ddb0"),s("fb6a"),s("b0c0"),s("a630");function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var s=0,n=new Array(t);s<t;s++)n[s]=e[s];return n}function o(e,t){if(e){if("string"===typeof e)return n(e,t);var s=Object.prototype.toString.call(e).slice(8,-1);return"Object"===s&&e.constructor&&(s=e.constructor.name),"Map"===s||"Set"===s?Array.from(e):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?n(e,t):void 0}}function a(e,t){var s;if("undefined"===typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(s=o(e))||t&&e&&"number"===typeof e.length){s&&(e=s);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var l,c=!0,r=!1;return{s:function(){s=e[Symbol.iterator]()},n:function(){var e=s.next();return c=e.done,e},e:function(e){r=!0,l=e},f:function(){try{c||null==s["return"]||s["return"]()}finally{if(r)throw l}}}}}}]);